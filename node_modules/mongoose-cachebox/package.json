{
  "name": "mongoose-cachebox",
  "version": "1.2.0",
  "description": "Cache mongoose queries in memory, redis or use your own driver",
  "author": {
    "name": "Jonathan Brumley",
    "email": "cayasso@gmail.com"
  },
  "homepage": "https://github.com/cayasso/mongoose-cachebox",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/cayasso/mongoose-cachebox.git"
  },
  "keywords": [
    "plugin",
    "mongoose",
    "query",
    "cache",
    "data",
    "mongo",
    "mongodb",
    "redis",
    "store",
    "memory",
    "catbox",
    "ttl"
  ],
  "license": "MIT",
  "dependencies": {
    "debug": "0.7.x",
    "cacheman": "~1.x.x",
    "cacheman-redis": "~0.1.0"
  },
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*",
    "redis": "0.8.x",
    "mongoose": "~3.6.x"
  },
  "readme": "# mongoose cachebox\n\n[![Build Status](https://travis-ci.org/cayasso/mongoose-cachebox.png?branch=master)](https://travis-ci.org/cayasso/mongoose-cachebox)\n[![NPM version](https://badge.fury.io/js/mongoose-cachebox.png)](http://badge.fury.io/js/mongoose-cachebox)\n\nCaching [mongoose](http://http://mongoosejs.com/) queries easier with [cacheman](https://github.com/cayasso/cacheman) that supports in-memory, and Redis engines.\n\n## Instalation\n\n``` bash\n$ npm install mongoose-cachebox\n```\n\n## Usage\n\n``` javascript\nvar mongoose = require('mongoose');\n\nvar options = {\n  cache: true, // start caching\n  ttl: 30 // 30 seconds\n};\n\n// adding mongoose cachebox\nmongooseCachebox(mongoose, options);\n```\n\nThen later any `find` query will be cached for 60 seconds.\n\nYou can also enable caching programatically by using the `cache` method directly from the query instance:\n\n``` javascript\nvar Person = mongoose.model('Person');\n\nPerson.find({ active: true })\n.cache('50s') // cache for 50 seconds\n.exec(function (err, docs) { /* ... */\n  \n  if (err) throw error;\n\n  console.log(docs.ttl) // time left for expiration in ms\n  console.log(docs.stored); // timestamp this query was cached\n  console.log(docs);\n\n});\n\n```\n\n## API\n\nThis plugin will add two more methods to a mongoose query instance `cache` and `ttl`.\n\n### query.cache([cached], [ttl])\n\nBoth parameters `cache` and `ttl` are optional, the first one is for enable caching the second is for specifying the cache expiration (time to live).\n\nFor start caching just call the `cache` method:\n\n``` javascript\nPerson.find({ active: true })\n.cache() // will enable caching with 60 seconds ttl\n.exec(function (err, docs) {\n  /* .... */\n});\n```\n\nThe above is equivalent to this:\n\n``` javascript\nPerson.find({ active: true })\n.cache(true) // start caching with 60 seconds ttl\n.exec(function (err, docs) {\n  /* .... */\n});\n```\n\nYou can specify the `ttl` (time to live) value directly:\n\n``` javascript\nPerson.find({ active: true })\n.cache(10) // cache for 10 seconds\n.exec(function (err, docs) {\n  /* .... */\n});\n```\n\nThe above is equivalent to this:\n\n``` javascript\nPerson.find({ active: true })\n.cache(true, 10) // enable caching with 10 seconds ttl\n.exec(function (err, docs) {\n  /* .... */\n});\n```\n\nAnd to disable caching for specific query just pass `false`:\n\n``` javascript\nPerson.find({ active: true })\n.cache(false) // stop caching this query\n.exec(function (err, docs) {\n  /* .... */\n});\n```\n\n### query.ttl(ttl)\n\nBy default the ttl value is `60000` (60 seconds) but you can use the `ttl` method to specify a different value:\n\n``` javascript\nPerson.find({ active: true })\n.cache() // cache query\n.ttl(10) // caching for 10 seconds\n.exec(function (err, docs) {\n  /* .... */\n});\n```\n\n## Redis\n\nBy default `mongoose-cachebox` will use the memory engine to cache queries but it can cache queries using `Redis` by specifying redis engine when initializing the plugin:\n\n``` javascript\nvar mongoose = require('mongoose');\n\nvar options = {\n  engine: 'redis',\n  host: '127.0.0.1',\n  port: '6379',\n  password: 'secret'\n};\n\n// adding mongoose cachebox\nmongooseCachebox(mongoose, options);\n```\n\nThis module use [cacheman](https://github.com/cayasso/cacheman) for the caching magic, so check out the project for more details and options.\n\n## Run tests\n\n``` bash\n$ make test\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Jonathan Brumley &lt;cayasso@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cayasso/mongoose-cachebox/issues"
  },
  "_id": "mongoose-cachebox@1.2.0",
  "dist": {
    "shasum": "e6ec5dd4d55e16bd0b94f469260a803d1f58ab39"
  },
  "_from": "mongoose-cachebox@",
  "_resolved": "https://registry.npmjs.org/mongoose-cachebox/-/mongoose-cachebox-1.2.0.tgz"
}
