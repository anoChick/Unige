{
  "name": "cacheman",
  "version": "1.0.2",
  "description": "Small and efficient cache provider for Node.JS with In-memory, Redis and MongoDB engines",
  "author": {
    "name": "Jonathan Brumley",
    "email": "cayasso@gmail.com"
  },
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/cayasso/cacheman.git"
  },
  "keywords": [
    "cache",
    "file",
    "redis",
    "memory",
    "mongodb",
    "caching",
    "mongo",
    "store",
    "ttl",
    "middleware"
  ],
  "license": "MIT",
  "devDependencies": {
    "mocha": "~1.12.0",
    "cacheman-redis": "~0.1.x",
    "cacheman-mongo": "~0.1.x",
    "cacheman-file": "latest"
  },
  "dependencies": {
    "cacheman-memory": "~0.1.x",
    "ms": "~0.6.1"
  },
  "readme": "# cacheman\n\n[![Build Status](https://travis-ci.org/cayasso/cacheman.png?branch=master)](https://travis-ci.org/cayasso/cacheman)\n[![NPM version](https://badge.fury.io/js/cacheman.png)](http://badge.fury.io/js/cacheman)\n\nSmall and efficient cache provider for Node.JS with In-memory, File, Redis and MongoDB engines.\n\n## Instalation\n\n``` bash\n$ npm install cacheman\n```\n\n## Usage\n\n```javascript\nvar Cacheman = require('cacheman');\nvar cache = new Cacheman('todo');\n\n// set the value\ncache.set('my key', { foo: 'bar' }, function (error) {\n\n  if (error) throw error;\n\n  // get the value\n  cache.get('my key', function (error, value) {\n\n    if (error) throw error;\n\n    console.log(value); //-> {foo:\"bar\"}\n\n    // delete entry\n    cache.del('my key', function (error){\n      \n      if (error) throw error;\n\n      console.log('value deleted');\n    });\n\n  });\n});\n```\n\n## API\n\n### Cacheman(name, [options])\n\nCreate `cacheman` instance. It accepts a required `name` and an `options`. `options` can contain `ttl` to set the default \"Time To Live\" in seconds, `engine` that could be \"memory\", \"in file\", \"redis\" or \"mongo\", and the corresponding engine options that can be passed like `port`, `host`, etc.\n\nBy default `cacheman` uses the `cacheman-memory` engine.\n\n```javascript\nvar options = {\n  ttl: 90,\n  engine: 'redis',\n  port: 9999,\n  host: '127.0.0.1'\n};\n\nvar cache = new Cacheman('todo', options);\n```\n\n### cache.set(key, value, [ttl, [fn]])\n\nStores or updates a value.\n\n```javascript\ncache.set('foo', { a: 'bar' }, function (err, value) {\n  if (err) throw err;\n  console.log(value); //-> {a:'bar'}\n});\n```\n\nOr add a TTL(Time To Live) in seconds like this:\n\n```javascript\n// key will expire in 60 seconds\ncache.set('foo', { a: 'bar' }, 60, function (err, value) {\n  if (err) throw err;\n  console.log(value); //-> {a:'bar'}\n});\n```\n\nYou can also use humman readable values for `ttl` like: `1s`, `1m`, etc. Check out the [ms](https://github.com/guille/ms.js) project for additional information on supported formats.\n\n```javascript\n// key will expire in 45 seconds\ncache.set('foo', { a: 'bar' }, '45s', function (err, value) {\n  if (err) throw err;\n  console.log(value); //-> {a:'bar'}\n});\n```\n\n### cache.get(key, fn)\n\nRetrieves a value for a given key, if there is no value for the given key a null value will be returned.\n\n```javascript\ncache.get(function (err, value) {\n  if (err) throw err;\n  console.log(value);\n});\n```\n\n### cache.del(key, [fn])\n\nDeletes a key out of the cache.\n\n```javascript\ncache.del('foo', function (err) {\n  if (err) throw err;\n  // foo was deleted\n});\n```\n\n### cache.clear([fn])\n\nClear the cache entirely, throwing away all values.\n\n```javascript\ncache.clear(function (err) {\n  if (err) throw err;\n  // cache is now clear\n});\n```\n\n### cache.cache(key, data, ttl, [fn])\n\nCache shortcut method that support middleware. This method will first call `get`\nand if the key is not found in cache it will call `set` to save the value in cache.\n\n```javascript\ncache.cache('foo', { a: 'bar' }, '45s', function (err) {\n  if (err) throw err;\n  console.log(value); //-> {a:'bar'}\n});\n```\n\n### cache.use(fn)\n\nThis method allow to add middlewares that will be executed when the `cache` method \nis called, meaning that you can intercept the function right after the `get` and `get` methods.\n\nFor example we can add a middleware that will force ttl of 10 seconds on all values to cache:\n\n```javascript\nfunction expireInMiddleware (expireIn) {\n  return function (key, data, ttl, next) {\n    next(null, data, expire);\n  }\n};\n\ncache.use(expireInMiddleware('10s'));\n\ncache.cache('foo', { a: 'bar' }, '45s', function (err) {\n  if (err) throw err;\n  console.log(value); //-> {a:'bar'}\n});\n```\n\nOr we can add a middleware to ovewrite the value:\n\n```javascript\nfunction overwriteMiddleware (val) {\n  return function (key, data, ttl, next) {\n    next(null, val, expire);\n  }\n};\n\ncache.use(overwriteMiddleware({ a: 'foo' }));\n\ncache.cache('foo', { a: 'bar' }, '45s', function (err, data) {\n  if (err) throw err;\n  console.log(data); //-> {a:'foo'}\n});\n```\n\nYou can also pass errors as first argument to stop the cache execution:\n\n```javascript\nfunction overwriteMiddleware () {\n  return function (key, data, ttl, next) {\n    next(new Error('There was an error'));\n  }\n};\n\ncache.use(overwriteMiddleware());\n\ncache.cache('foo', { a: 'bar' }, '45s', function (err) {\n  if (err) throw err; // Will throw the error\n});\n```\n\n## Run tests\n\n``` bash\n$ make test\n```\n\n## Supported engines\n\n * [cacheman-memory](https://github.com/cayasso/cacheman-memory)\n * [cacheman-redis](https://github.com/cayasso/cacheman-redis)\n * [cacheman-mongo](https://github.com/cayasso/cacheman-mongo)\n * [cacheman-file](https://github.com/taronfoxworth/cacheman-file)\n\n## Credits\n\nThis library was inspired by the [hilmi](https://github.com/eknkc/hilmi) project.\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Jonathan Brumley &lt;cayasso@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cayasso/cacheman/issues"
  },
  "homepage": "https://github.com/cayasso/cacheman",
  "_id": "cacheman@1.0.2",
  "dist": {
    "shasum": "c51d6795a2ac851340d3ff02eed780d57fb4d85e"
  },
  "_from": "cacheman@~1.x.x",
  "_resolved": "https://registry.npmjs.org/cacheman/-/cacheman-1.0.2.tgz"
}
